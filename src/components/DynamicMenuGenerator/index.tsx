import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { 
  Settings, 
  Plus, 
  Trash2, 
  Eye, 
  Code, 
  Zap,
  Brain,
  Cpu,
  Database,
  Globe,
  Shield,
  BarChart3
} from 'lucide-react';

interface SystemModule {
  id: string;
  name: string;
  description: string;
  category: string;
  icon: string;
  isActive: boolean;
  isAutoGenerated: boolean;
  priority: number;
  systemRequirements: string[];
  uiConfig: {
    layout: 'dashboard' | 'form' | 'table' | 'chart' | 'custom';
    components: string[];
    theme: string;
  };
}

interface MenuCategory {
  id: string;
  name: string;
  color: string;
  icon: string;
  modules: SystemModule[];
  isAutoExpanded: boolean;
}

const iconMap = {
  Settings, Plus, Trash2, Eye, Code, Zap, Brain, Cpu, Database, Globe, Shield, BarChart3
};

export const DynamicMenuGenerator: React.FC = () => {
  const [categories, setCategories] = useState<MenuCategory[]>([]);
  const [isAutoMode, setIsAutoMode] = useState(true);
  const [newModuleName, setNewModuleName] = useState('');
  const [newModuleDesc, setNewModuleDesc] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');

  // Initialize default system modules
  useEffect(() => {
    const defaultCategories: MenuCategory[] = [
      {
        id: 'core',
        name: 'Core Systems',
        color: 'blue',
        icon: 'Brain',
        isAutoExpanded: true,
        modules: [
          {
            id: 'auto-ui-generator',
            name: 'Auto UI Generator',
            description: 'Automatically generates user interfaces based on system requirements',
            category: 'core',
            icon: 'Code',
            isActive: true,
            isAutoGenerated: true,
            priority: 1,
            systemRequirements: ['react', 'tailwind', 'shadcn'],
            uiConfig: {
              layout: 'dashboard',
              components: ['form', 'preview', 'controls'],
              theme: 'dark'
            }
          },
          {
            id: 'dynamic-menu',
            name: 'Dynamic Menu System',
            description: 'Automatically manages and creates menu items',
            category: 'core',
            icon: 'Settings',
            isActive: true,
            isAutoGenerated: true,
            priority: 2,
            systemRequirements: ['navigation', 'routing'],
            uiConfig: {
              layout: 'table',
              components: ['menu-tree', 'controls'],
              theme: 'dark'
            }
          }
        ]
      },
      {
        id: 'intelligence',
        name: 'Intelligence Systems',
        color: 'purple',
        icon: 'Brain',
        isAutoExpanded: false,
        modules: [
          {
            id: 'ai-interface-builder',
            name: 'AI Interface Builder',
            description: 'AI-powered interface generation and optimization',
            category: 'intelligence',
            icon: 'Zap',
            isActive: true,
            isAutoGenerated: true,
            priority: 3,
            systemRequirements: ['ai', 'ml', 'optimization'],
            uiConfig: {
              layout: 'custom',
              components: ['ai-controls', 'preview', 'optimization'],
              theme: 'gradient'
            }
          }
        ]
      },
      {
        id: 'automation',
        name: 'Automation Systems',
        color: 'green',
        icon: 'Cpu',
        isAutoExpanded: false,
        modules: [
          {
            id: 'auto-deployment',
            name: 'Auto Deployment',
            description: 'Automatically deploys and manages system components',
            category: 'automation',
            icon: 'Globe',
            isActive: false,
            isAutoGenerated: true,
            priority: 4,
            systemRequirements: ['deployment', 'monitoring'],
            uiConfig: {
              layout: 'dashboard',
              components: ['status', 'logs', 'controls'],
              theme: 'dark'
            }
          }
        ]
      }
    ];

    setCategories(defaultCategories);
  }, []);

  // Auto-generate new modules based on system analysis
  const autoGenerateModules = () => {
    const systemNeeds = [
      'Data Analytics Dashboard',
      'Security Monitoring',
      'Performance Optimizer',
      'User Behavior Tracker',
      'Resource Manager'
    ];

    const newModules = systemNeeds.map((need, index) => ({
      id: `auto-${Date.now()}-${index}`,
      name: need,
      description: `Automatically generated ${need.toLowerCase()} system`,
      category: 'automation',
      icon: 'BarChart3',
      isActive: false,
      isAutoGenerated: true,
      priority: 10 + index,
      systemRequirements: ['analytics', 'monitoring'],
      uiConfig: {
        layout: 'dashboard' as const,
        components: ['charts', 'metrics', 'controls'],
        theme: 'dark'
      }
    }));

    setCategories(prev => prev.map(cat => 
      cat.id === 'automation' 
        ? { ...cat, modules: [...cat.modules, ...newModules] }
        : cat
    ));
  };

  // Toggle module activation
  const toggleModule = (categoryId: string, moduleId: string) => {
    setCategories(prev => prev.map(cat => 
      cat.id === categoryId
        ? {
            ...cat,
            modules: cat.modules.map(mod =>
              mod.id === moduleId ? { ...mod, isActive: !mod.isActive } : mod
            )
          }
        : cat
    ));
  };

  // Add custom module
  const addCustomModule = () => {
    if (!newModuleName || !selectedCategory) return;

    const newModule: SystemModule = {
      id: `custom-${Date.now()}`,
      name: newModuleName,
      description: newModuleDesc || `Custom ${newModuleName} module`,
      category: selectedCategory,
      icon: 'Settings',
      isActive: false,
      isAutoGenerated: false,
      priority: 100,
      systemRequirements: ['custom'],
      uiConfig: {
        layout: 'dashboard',
        components: ['basic'],
        theme: 'dark'
      }
    };

    setCategories(prev => prev.map(cat => 
      cat.id === selectedCategory
        ? { ...cat, modules: [...cat.modules, newModule] }
        : cat
    ));

    setNewModuleName('');
    setNewModuleDesc('');
  };

  // Delete module
  const deleteModule = (categoryId: string, moduleId: string) => {
    setCategories(prev => prev.map(cat => 
      cat.id === categoryId
        ? {
            ...cat,
            modules: cat.modules.filter(mod => mod.id !== moduleId)
          }
        : cat
    ));
  };

  const getIconComponent = (iconName: string) => {
    const IconComponent = iconMap[iconName as keyof typeof iconMap] || Settings;
    return IconComponent;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-black p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <Card className="bg-gray-800/50 border-gray-700">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-2xl text-white flex items-center gap-3">
                  <Settings className="w-8 h-8 text-purple-400" />
                  Dynamic Menu/UI Generator
                </CardTitle>
                <p className="text-gray-400 mt-2">
                  Sistem otomatis untuk membuat interface dan mengelola menu berdasarkan kebutuhan sistem
                </p>
              </div>
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <Switch 
                    checked={isAutoMode} 
                    onCheckedChange={setIsAutoMode}
                    id="auto-mode"
                  />
                  <label htmlFor="auto-mode" className="text-white text-sm">
                    Auto Mode
                  </label>
                </div>
                <Button 
                  onClick={autoGenerateModules}
                  className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
                >
                  <Zap className="w-4 h-4 mr-2" />
                  Generate Auto
                </Button>
              </div>
            </div>
          </CardHeader>
        </Card>

        {/* Add New Module */}
        <Card className="bg-gray-800/50 border-gray-700">
          <CardHeader>
            <CardTitle className="text-white">Add Custom Module</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Input
                placeholder="Module Name"
                value={newModuleName}
                onChange={(e) => setNewModuleName(e.target.value)}
                className="bg-gray-900 border-gray-600 text-white"
              />
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="bg-gray-900 border border-gray-600 rounded-md px-3 py-2 text-white"
              >
                <option value="">Select Category</option>
                {categories.map(cat => (
                  <option key={cat.id} value={cat.id}>{cat.name}</option>
                ))}
              </select>
              <Button onClick={addCustomModule} className="bg-green-600 hover:bg-green-700">
                <Plus className="w-4 h-4 mr-2" />
                Add Module
              </Button>
            </div>
            <Textarea
              placeholder="Module Description (optional)"
              value={newModuleDesc}
              onChange={(e) => setNewModuleDesc(e.target.value)}
              className="bg-gray-900 border-gray-600 text-white"
            />
          </CardContent>
        </Card>

        {/* Categories and Modules */}
        <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
          {categories.map(category => (
            <Card key={category.id} className="bg-gray-800/50 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  {React.createElement(getIconComponent(category.icon), { 
                    className: `w-5 h-5 text-blue-400` 
                  })}
                  {category.name}
                  <Badge variant="outline" className="text-xs">
                    {category.modules.filter(m => m.isActive).length}/{category.modules.length}
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {category.modules.map(module => {
                  const IconComponent = getIconComponent(module.icon);
                  return (
                    <div
                      key={module.id}
                      className={`p-3 rounded-lg border transition-all ${
                        module.isActive
                          ? 'bg-green-900/20 border-green-600/50'
                          : 'bg-gray-900/50 border-gray-600/50'
                      }`}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <IconComponent className="w-4 h-4 text-gray-400" />
                            <h4 className="text-white text-sm font-medium">
                              {module.name}
                            </h4>
                            {module.isAutoGenerated && (
                              <Badge variant="outline" className="text-xs text-blue-400 border-blue-400">
                                Auto
                              </Badge>
                            )}
                          </div>
                          <p className="text-gray-400 text-xs mb-2">
                            {module.description}
                          </p>
                          <div className="flex items-center gap-2">
                            <Switch
                              checked={module.isActive}
                              onCheckedChange={() => toggleModule(category.id, module.id)}
                            />
                            <span className="text-xs text-gray-500">
                              {module.isActive ? 'Active' : 'Inactive'}
                            </span>
                          </div>
                        </div>
                        <div className="flex flex-col gap-1">
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => {/* View module details */}}
                            className="text-gray-400 hover:text-white p-1"
                          >
                            <Eye className="w-3 h-3" />
                          </Button>
                          {!module.isAutoGenerated && (
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={() => deleteModule(category.id, module.id)}
                              className="text-red-400 hover:text-red-300 p-1"
                            >
                              <Trash2 className="w-3 h-3" />
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </CardContent>
            </Card>
          ))}
        </div>

        {/* System Status */}
        <Card className="bg-gray-800/50 border-gray-700">
          <CardHeader>
            <CardTitle className="text-white">System Status</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-green-400">
                  {categories.reduce((total, cat) => total + cat.modules.filter(m => m.isActive).length, 0)}
                </div>
                <div className="text-gray-400 text-sm">Active Modules</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-400">
                  {categories.reduce((total, cat) => total + cat.modules.filter(m => m.isAutoGenerated).length, 0)}
                </div>
                <div className="text-gray-400 text-sm">Auto Generated</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-400">
                  {categories.length}
                </div>
                <div className="text-gray-400 text-sm">Categories</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-yellow-400">
                  {isAutoMode ? 'ON' : 'OFF'}
                </div>
                <div className="text-gray-400 text-sm">Auto Mode</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};