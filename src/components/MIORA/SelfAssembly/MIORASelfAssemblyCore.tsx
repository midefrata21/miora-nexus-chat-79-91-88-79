import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  Cpu, 
  Code, 
  TestTube, 
  Layers, 
  Zap, 
  Bot,
  Activity,
  Sparkles,
  Settings,
  CheckCircle
} from 'lucide-react';

interface UIComponent {
  id: string;
  name: string;
  type: 'layout' | 'component' | 'page' | 'navigation';
  status: 'generating' | 'testing' | 'active' | 'optimizing';
  autoGenerated: boolean;
  complexity: number;
  usageCount: number;
}

interface ArchitectureDecision {
  id: string;
  component: string;
  decision: string;
  reasoning: string;
  impact: 'low' | 'medium' | 'high' | 'critical';
  timestamp: number;
}

export const MIORASelfAssemblyCore: React.FC = () => {
  const [isActive, setIsActive] = useState(false);
  const [uiComponents, setUIComponents] = useState<UIComponent[]>([]);
  const [architectureDecisions, setArchitectureDecisions] = useState<ArchitectureDecision[]>([]);
  const [assemblyProgress, setAssemblyProgress] = useState(0);
  const [currentTask, setCurrentTask] = useState('Standby');
  const [operationCount, setOperationCount] = useState(0);

  const generateUIComponent = useCallback(() => {
    const componentTypes = ['layout', 'component', 'page', 'navigation'] as const;
    const componentNames = {
      layout: ['DashboardLayout', 'SidebarLayout', 'GridLayout', 'FlexLayout'],
      component: ['DataCard', 'ActionButton', 'FormInput', 'StatusIndicator'],
      page: ['AnalyticsPage', 'SettingsPage', 'ProfilePage', 'ReportsPage'],
      navigation: ['NavBar', 'BreadCrumb', 'TabMenu', 'Pagination']
    };

    const type = componentTypes[Math.floor(Math.random() * componentTypes.length)];
    const names = componentNames[type];
    const name = names[Math.floor(Math.random() * names.length)];

    const newComponent: UIComponent = {
      id: `ui_${Date.now()}`,
      name: `Auto${name}${Date.now()}`,
      type,
      status: 'generating',
      autoGenerated: true,
      complexity: Math.floor(Math.random() * 100) + 1,
      usageCount: 0
    };

    setUIComponents(prev => [...prev, newComponent]);
    setCurrentTask(`Generating ${name} component`);

    // Simulate component lifecycle
    setTimeout(() => {
      setUIComponents(prev => prev.map(comp => 
        comp.id === newComponent.id ? { ...comp, status: 'testing' } : comp
      ));
      setCurrentTask(`Testing ${name} component`);
    }, 2000);

    setTimeout(() => {
      setUIComponents(prev => prev.map(comp => 
        comp.id === newComponent.id ? { ...comp, status: 'active' } : comp
      ));
      setCurrentTask('Standby');
    }, 4000);

    console.log(`🎨 AUTO-UI: Generated ${name} (${type})`);
  }, []);

  const makeArchitectureDecision = useCallback(() => {
    const decisions = [
      {
        component: 'Database Layer',
        decision: 'Implement distributed caching with Redis cluster',
        reasoning: 'High-frequency read operations detected, need to reduce latency',
        impact: 'high' as const
      },
      {
        component: 'API Gateway',
        decision: 'Add rate limiting and request batching',
        reasoning: 'API usage patterns show burst traffic, need throttling',
        impact: 'medium' as const
      },
      {
        component: 'UI Framework',
        decision: 'Migrate to micro-frontend architecture',
        reasoning: 'Component complexity increasing, need better modularity',
        impact: 'critical' as const
      },
      {
        component: 'Authentication',
        decision: 'Implement OAuth 2.0 with JWT refresh tokens',
        reasoning: 'Security audit recommends modern auth standards',
        impact: 'high' as const
      }
    ];

    const decision = decisions[Math.floor(Math.random() * decisions.length)];
    
    const newDecision: ArchitectureDecision = {
      id: `arch_${Date.now()}`,
      ...decision,
      timestamp: Date.now()
    };

    setArchitectureDecisions(prev => [...prev, newDecision]);
    setCurrentTask(`Architecture: ${decision.decision}`);

    console.log(`🏗️ ARCHITECTURE: ${decision.decision}`);
  }, []);

  const runAutoTests = useCallback(() => {
    setCurrentTask('Running automated test suite');
    
    setTimeout(() => {
      const testResults = Math.random() > 0.2 ? 'passed' : 'failed';
      setCurrentTask(`Tests ${testResults} - Optimizing components`);
      
      if (testResults === 'passed') {
        setUIComponents(prev => prev.map(comp => ({
          ...comp,
          usageCount: comp.usageCount + Math.floor(Math.random() * 5)
        })));
      }
    }, 3000);

    console.log('🧪 AUTO-TEST: Running comprehensive test suite');
  }, []);

  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (isActive) {
      interval = setInterval(() => {
        const action = Math.random();
        setOperationCount(prev => prev + 1);
        setAssemblyProgress(prev => Math.min(prev + Math.random() * 5, 100));

        if (action < 0.4) {
          generateUIComponent();
        } else if (action < 0.7) {
          makeArchitectureDecision();
        } else {
          runAutoTests();
        }
      }, 8000);
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isActive, generateUIComponent, makeArchitectureDecision, runAutoTests]);

  const handleToggle = () => {
    setIsActive(!isActive);
    if (!isActive) {
      setCurrentTask('Initializing Self-Assembly Mode');
      setAssemblyProgress(5);
    } else {
      setCurrentTask('Standby');
    }
  };

  return (
    <div className="space-y-6">
      {/* Control Panel */}
      <Card className="bg-gradient-to-br from-purple-900/20 to-blue-900/20 border-purple-500/30">
        <CardHeader>
          <CardTitle className="flex items-center text-2xl">
            <Bot className="w-8 h-8 mr-3 text-purple-400" />
            MIORA Self-Assembly Core
            <Badge className="ml-4 bg-purple-500/20 text-purple-300">
              {isActive ? 'ACTIVE' : 'STANDBY'}
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="flex items-center justify-between">
            <div className="space-y-2">
              <p className="text-gray-300">
                Sistem otomatis untuk membangun UI, arsitektur, dan testing
              </p>
              <p className="text-sm text-gray-400">
                Status: {currentTask}
              </p>
            </div>
            <Button 
              onClick={handleToggle}
              variant={isActive ? "destructive" : "default"}
              size="lg"
              className="min-w-[120px]"
            >
              {isActive ? 'STOP' : 'START'}
            </Button>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-400">{uiComponents.length}</div>
              <div className="text-sm text-gray-400">UI Components</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-400">{architectureDecisions.length}</div>
              <div className="text-sm text-gray-400">Architecture Decisions</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-400">{operationCount}</div>
              <div className="text-sm text-gray-400">Total Operations</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-400">{assemblyProgress.toFixed(1)}%</div>
              <div className="text-sm text-gray-400">Assembly Progress</div>
            </div>
          </div>

          <Progress value={assemblyProgress} className="h-2" />
        </CardContent>
      </Card>

      {/* Generated UI Components */}
      <Card className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 border-gray-700/50">
        <CardHeader>
          <CardTitle className="flex items-center">
            <Code className="w-6 h-6 mr-2 text-blue-400" />
            Auto-Generated UI Components
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3 max-h-96 overflow-y-auto">
            {uiComponents.slice(-10).reverse().map((component) => (
              <div key={component.id} className="flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-700/50">
                <div className="flex items-center space-x-3">
                  <Layers className="w-5 h-5 text-blue-400" />
                  <div>
                    <p className="font-medium text-gray-200">{component.name}</p>
                    <p className="text-sm text-gray-400">{component.type} • Complexity: {component.complexity}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <Badge variant={
                    component.status === 'active' ? 'default' :
                    component.status === 'testing' ? 'secondary' :
                    component.status === 'generating' ? 'outline' : 'destructive'
                  }>
                    {component.status}
                  </Badge>
                  <span className="text-sm text-gray-400">Used: {component.usageCount}x</span>
                </div>
              </div>
            ))}
            {uiComponents.length === 0 && (
              <p className="text-center text-gray-500 py-8">
                No components generated yet. Start the system to begin auto-generation.
              </p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Architecture Decisions */}
      <Card className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 border-gray-700/50">
        <CardHeader>
          <CardTitle className="flex items-center">
            <Settings className="w-6 h-6 mr-2 text-orange-400" />
            Autonomous Architecture Decisions
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3 max-h-96 overflow-y-auto">
            {architectureDecisions.slice(-8).reverse().map((decision) => (
              <div key={decision.id} className="p-4 bg-gray-800/50 rounded-lg border border-gray-700/50">
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="w-5 h-5 text-green-400" />
                    <h4 className="font-medium text-gray-200">{decision.component}</h4>
                  </div>
                  <Badge variant={
                    decision.impact === 'critical' ? 'destructive' :
                    decision.impact === 'high' ? 'default' :
                    decision.impact === 'medium' ? 'secondary' : 'outline'
                  }>
                    {decision.impact}
                  </Badge>
                </div>
                <p className="text-sm text-gray-300 mb-2">{decision.decision}</p>
                <p className="text-xs text-gray-500">{decision.reasoning}</p>
              </div>
            ))}
            {architectureDecisions.length === 0 && (
              <p className="text-center text-gray-500 py-8">
                No architecture decisions made yet. System will analyze and optimize automatically.
              </p>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};