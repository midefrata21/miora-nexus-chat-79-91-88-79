import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Search, CheckCircle, XCircle, Clock, Play, Pause } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const AutoTestingFramework: React.FC = () => {
  const { toast } = useToast();
  const [isRunning, setIsRunning] = useState(false);
  const [testResults, setTestResults] = useState({
    passed: 247,
    failed: 3,
    skipped: 12,
    coverage: 94.2
  });

  const testSuites = [
    {
      name: 'Unit Tests',
      tests: 156,
      passed: 154,
      failed: 2,
      duration: '2.3s',
      status: 'completed',
      coverage: 96.8
    },
    {
      name: 'Integration Tests',
      tests: 89,
      passed: 87,
      failed: 1,
      duration: '15.7s',
      status: 'completed',
      coverage: 91.4
    },
    {
      name: 'E2E Tests',
      tests: 23,
      passed: 23,
      failed: 0,
      duration: '45.2s',
      status: 'completed',
      coverage: 88.9
    },
    {
      name: 'Performance Tests',
      tests: 12,
      passed: 12,
      failed: 0,
      duration: '8.1s',
      status: 'completed',
      coverage: 92.1
    }
  ];

  const recentTestRuns = [
    {
      commit: 'feat: add user authentication',
      timestamp: '2 minutes ago',
      duration: '1m 23s',
      status: 'passed',
      tests: 267,
      coverage: 94.2
    },
    {
      commit: 'fix: resolve memory leak in dashboard',
      timestamp: '15 minutes ago',
      duration: '1m 18s',
      status: 'passed',
      tests: 267,
      coverage: 93.8
    },
    {
      commit: 'refactor: optimize API calls',
      timestamp: '1 hour ago',
      duration: '1m 25s',
      status: 'failed',
      tests: 265,
      coverage: 93.1
    }
  ];

  const autoGeneratedTests = [
    {
      component: 'UserProfile.tsx',
      tests: 12,
      type: 'Component Tests',
      confidence: 98.2,
      generated: '5 minutes ago'
    },
    {
      component: 'api/auth.ts',
      tests: 8,
      type: 'API Tests',
      confidence: 95.7,
      generated: '12 minutes ago'
    },
    {
      component: 'Dashboard.tsx',
      tests: 15,
      type: 'Integration Tests',
      confidence: 92.4,
      generated: '1 hour ago'
    }
  ];

  const runAllTests = () => {
    setIsRunning(true);
    
    setTimeout(() => {
      setIsRunning(false);
      setTestResults(prev => ({
        ...prev,
        passed: prev.passed + Math.floor(Math.random() * 5),
        coverage: Math.min(99.9, prev.coverage + Math.random() * 2)
      }));
      
      toast({
        title: "ğŸ§ª Test Suite Complete",
        description: `${testResults.passed + testResults.failed + testResults.skipped} tests completed in 1m 23s`
      });
    }, 5000);
  };

  return (
    <div className="space-y-6">
      <Card className="bg-gradient-to-r from-emerald-900/40 to-teal-900/40 border-emerald-500/40">
        <CardHeader>
          <CardTitle className="flex items-center gap-3 text-emerald-300">
            <Search className="w-6 h-6" />
            Auto-Testing Framework
            <Badge className="bg-emerald-600/20 text-emerald-300">Continuous Testing</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-emerald-300">{testResults.passed}</div>
              <div className="text-xs text-gray-400">Tests Passed</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-red-300">{testResults.failed}</div>
              <div className="text-xs text-gray-400">Tests Failed</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-yellow-300">{testResults.skipped}</div>
              <div className="text-xs text-gray-400">Tests Skipped</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-cyan-300">{testResults.coverage}%</div>
              <div className="text-xs text-gray-400">Code Coverage</div>
            </div>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Badge className="bg-green-600/20 text-green-300">
                Auto-testing Active
              </Badge>
              <span className="text-sm text-gray-300">
                Running on every code change
              </span>
            </div>
            <Button 
              onClick={runAllTests}
              disabled={isRunning}
              className="bg-emerald-600 hover:bg-emerald-700 text-white"
            >
              {isRunning ? (
                <>
                  <Pause className="w-4 h-4 mr-2 animate-spin" />
                  Running Tests...
                </>
              ) : (
                <>
                  <Play className="w-4 h-4 mr-2" />
                  Run All Tests
                </>
              )}
            </Button>
          </div>

          <Card className="bg-black/20 border-emerald-500/30">
            <CardHeader>
              <CardTitle className="text-emerald-300 text-lg">Test Suites</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {testSuites.map((suite, index) => (
                <div key={index} className="p-4 bg-gray-800/50 rounded-lg">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                      <span className="text-white font-medium">{suite.name}</span>
                      <Badge className="bg-blue-600/20 text-blue-300 text-xs">
                        {suite.tests} tests
                      </Badge>
                    </div>
                    <div className="flex items-center gap-2">
                      <Clock className="w-4 h-4 text-gray-400" />
                      <span className="text-sm text-gray-300">{suite.duration}</span>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4 mb-3">
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-4 h-4 text-green-400" />
                      <span className="text-sm text-green-300">{suite.passed} passed</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <XCircle className="w-4 h-4 text-red-400" />
                      <span className="text-sm text-red-300">{suite.failed} failed</span>
                    </div>
                    <div className="text-sm text-gray-300">
                      Coverage: {suite.coverage}%
                    </div>
                  </div>
                  
                  <div className={`w-full h-2 bg-gray-700 rounded-full overflow-hidden`}>
                    <div 
                      className="h-full bg-emerald-500 transition-all"
                      style={{ width: `${(suite.passed / suite.tests) * 100}%` }}
                    />
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          <Card className="bg-black/20 border-emerald-500/30">
            <CardHeader>
              <CardTitle className="text-emerald-300 text-lg">Auto-Generated Tests</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {autoGeneratedTests.map((test, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-800/50 rounded-lg">
                  <div>
                    <div className="text-white font-medium">{test.component}</div>
                    <div className="text-sm text-gray-400">{test.tests} {test.type} generated</div>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="text-sm text-gray-300">
                      Confidence: {test.confidence}%
                    </div>
                    <Badge className="bg-emerald-600/20 text-emerald-300 text-xs">
                      {test.generated}
                    </Badge>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          <Card className="bg-black/20 border-emerald-500/30">
            <CardHeader>
              <CardTitle className="text-emerald-300 text-lg">Recent Test Runs</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              {recentTestRuns.map((run, index) => (
                <div key={index} className="p-3 bg-gray-800/50 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-3">
                      {run.status === 'passed' ? (
                        <CheckCircle className="w-4 h-4 text-green-400" />
                      ) : (
                        <XCircle className="w-4 h-4 text-red-400" />
                      )}
                      <span className="text-white text-sm">{run.commit}</span>
                    </div>
                    <span className="text-xs text-gray-400">{run.timestamp}</span>
                  </div>
                  <div className="flex items-center gap-4 text-sm text-gray-300">
                    <span>{run.tests} tests</span>
                    <span>{run.duration}</span>
                    <span>Coverage: {run.coverage}%</span>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </CardContent>
      </Card>
    </div>
  );
};

export default AutoTestingFramework;