import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Code2, Zap, Bot, Sparkles, FileCode, RefreshCw } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const AdvancedCodeGeneration: React.FC = () => {
  const { toast } = useToast();
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedCode, setGeneratedCode] = useState('');

  const codeTemplates = [
    { name: 'React Component', type: 'react', complexity: 'Medium' },
    { name: 'API Endpoint', type: 'api', complexity: 'High' },
    { name: 'Database Schema', type: 'database', complexity: 'High' },
    { name: 'Unit Tests', type: 'testing', complexity: 'Medium' },
    { name: 'Utility Functions', type: 'utils', complexity: 'Low' },
    { name: 'TypeScript Interfaces', type: 'types', complexity: 'Low' }
  ];

  const generationStats = {
    totalGenerated: 15847,
    successRate: 96.3,
    avgTime: 2.1,
    linesOfCode: 892451
  };

  const generateCode = async () => {
    setIsGenerating(true);
    
    // Simulate AI code generation
    setTimeout(() => {
      const sampleCode = `// Generated by MIORA Advanced Code Generation
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

interface ${prompt || 'Generated'}Props {
  data: any;
  onUpdate: (data: any) => void;
}

export const ${prompt || 'Generated'}Component: React.FC<${prompt || 'Generated'}Props> = ({ data, onUpdate }) => {
  const [state, setState] = useState(data);
  
  useEffect(() => {
    // Auto-generated logic based on requirements
    if (data) {
      setState(data);
    }
  }, [data]);

  const handleUpdate = (newData: any) => {
    setState(newData);
    onUpdate(newData);
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Auto-Generated Component</CardTitle>
      </CardHeader>
      <CardContent>
        {/* Generated UI based on data structure */}
        <pre>{JSON.stringify(state, null, 2)}</pre>
      </CardContent>
    </Card>
  );
};

export default ${prompt || 'Generated'}Component;`;

      setGeneratedCode(sampleCode);
      setIsGenerating(false);
      
      toast({
        title: "ðŸš€ Code Generated Successfully",
        description: `Generated ${sampleCode.split('\n').length} lines of optimized code`
      });
    }, 2000);
  };

  return (
    <div className="space-y-6">
      <Card className="bg-gradient-to-r from-green-900/40 to-emerald-900/40 border-green-500/40">
        <CardHeader>
          <CardTitle className="flex items-center gap-3 text-green-300">
            <Code2 className="w-6 h-6" />
            Advanced Code Generation Engine
            <Badge className="bg-green-600/20 text-green-300">AI-Powered</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-green-300">{generationStats.totalGenerated.toLocaleString()}</div>
              <div className="text-xs text-gray-400">Components Generated</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-emerald-300">{generationStats.successRate}%</div>
              <div className="text-xs text-gray-400">Success Rate</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-cyan-300">{generationStats.avgTime}s</div>
              <div className="text-xs text-gray-400">Avg Generation Time</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-yellow-300">{generationStats.linesOfCode.toLocaleString()}</div>
              <div className="text-xs text-gray-400">Lines of Code</div>
            </div>
          </div>

          <div className="space-y-4">
            <div>
              <label className="text-white text-sm font-medium">Code Generation Prompt</label>
              <Textarea 
                placeholder="Describe what you want to generate (e.g., 'Create a user profile component with avatar, name, and edit functionality')"
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                className="mt-2"
              />
            </div>
            
            <Button 
              onClick={generateCode}
              disabled={isGenerating}
              className="bg-green-600 hover:bg-green-700 text-white w-full"
            >
              {isGenerating ? (
                <>
                  <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  Generating Code...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4 mr-2" />
                  Generate Code
                </>
              )}
            </Button>
          </div>

          {generatedCode && (
            <Card className="bg-black/20 border-green-500/30">
              <CardHeader>
                <CardTitle className="text-green-300 text-lg flex items-center gap-2">
                  <FileCode className="w-5 h-5" />
                  Generated Code
                </CardTitle>
              </CardHeader>
              <CardContent>
                <pre className="text-sm text-gray-300 overflow-x-auto whitespace-pre-wrap">
                  {generatedCode}
                </pre>
              </CardContent>
            </Card>
          )}

          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {codeTemplates.map((template, index) => (
              <Card key={index} className="bg-black/20 border-green-500/30 cursor-pointer hover:border-green-400/50 transition-all" onClick={() => setPrompt(`Generate a ${template.name.toLowerCase()}`)}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-sm font-medium text-white">{template.name}</div>
                      <div className="text-xs text-gray-400">{template.type}</div>
                    </div>
                    <Badge className={`text-xs ${
                      template.complexity === 'High' ? 'bg-red-600/20 text-red-300' :
                      template.complexity === 'Medium' ? 'bg-yellow-600/20 text-yellow-300' :
                      'bg-green-600/20 text-green-300'
                    }`}>
                      {template.complexity}
                    </Badge>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default AdvancedCodeGeneration;