
import { useCallback } from 'react';

interface TelegramConfig {
  botToken: string;
  chatId: string;
  enabled: boolean;
}

interface AlertMessage {
  type: 'signal' | 'performance' | 'error' | 'system' | 'emergency';
  title: string;
  message: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  timestamp: number;
  data?: any;
}

export const TelegramAlertSystem = () => {
  // In production, these would come from environment variables or user settings
  const defaultConfig: TelegramConfig = {
    botToken: '', // User needs to provide their bot token
    chatId: '', // User needs to provide their chat ID
    enabled: false // Disabled by default until configured
  };

  const formatSignalMessage = (signal: any): string => {
    const emoji = signal.type === 'BUY' ? 'üü¢' : signal.type === 'SELL' ? 'üî¥' : 'üü°';
    const timestamp = new Date().toLocaleString('id-ID');
    
    return `
${emoji} *MIORA TRADING SIGNAL*

üìä *Symbol:* ${signal.symbol}
üìà *Type:* ${signal.type}
üí∞ *Price:* $${signal.price.toFixed(2)}
üéØ *Target:* $${signal.targetPrice.toFixed(2)}
üõ°Ô∏è *Stop Loss:* $${signal.stopLoss.toFixed(2)}
üí™ *Strength:* ${signal.strength.toFixed(1)}%
üéØ *Confidence:* ${signal.confidence.toFixed(1)}%
‚ö†Ô∏è *Risk:* ${signal.risk.toUpperCase()}

üìã *Technical Analysis:*
‚Ä¢ RSI: ${signal.rsi.toFixed(1)}
‚Ä¢ EMA12: $${signal.ema12.toFixed(2)}
‚Ä¢ EMA26: $${signal.ema26.toFixed(2)}
‚Ä¢ MACD: ${signal.macd.toFixed(3)}

üí° *Reason:* ${signal.reason}

‚è∞ *Time:* ${timestamp}
ü§ñ *Generated by MIORA AI*
    `.trim();
  };

  const formatPerformanceMessage = (performance: any): string => {
    const profitEmoji = performance.totalPL >= 0 ? 'üí∞' : 'üìâ';
    const timestamp = new Date().toLocaleString('id-ID');
    
    return `
üìä *MIORA PERFORMANCE REPORT*

${profitEmoji} *Total P&L:* $${performance.totalPL.toFixed(2)}
‚úÖ *Success Rate:* ${performance.successRate.toFixed(1)}%
üîÑ *Cycles Completed:* ${performance.cycleCount}
üìà *Successful Signals:* ${performance.successfulSignals}
üìâ *Failed Signals:* ${performance.failedSignals}
‚è±Ô∏è *Avg Response Time:* ${performance.avgResponseTime.toFixed(0)}ms
üß† *Performance Score:* ${performance.score.toFixed(1)}%

‚è∞ *Report Time:* ${timestamp}
ü§ñ *MIORA AI System*
    `.trim();
  };

  const formatSystemMessage = (type: string, message: string): string => {
    const timestamp = new Date().toLocaleString('id-ID');
    const emoji = {
      'start': 'üöÄ',
      'stop': '‚èπÔ∏è',
      'error': '‚ùå',
      'warning': '‚ö†Ô∏è',
      'info': '‚ÑπÔ∏è',
      'emergency': 'üö®'
    }[type] || '‚ÑπÔ∏è';
    
    return `
${emoji} *MIORA SYSTEM ALERT*

üìù *Message:* ${message}
‚è∞ *Time:* ${timestamp}
ü§ñ *MIORA AI System*
    `.trim();
  };

  const sendToTelegram = useCallback(async (message: string, config: TelegramConfig = defaultConfig): Promise<boolean> => {
    if (!config.enabled || !config.botToken || !config.chatId) {
      console.log('Telegram not configured, message would be:', message);
      return false;
    }

    try {
      const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: config.chatId,
          text: message,
          parse_mode: 'Markdown',
          disable_web_page_preview: true
        })
      });

      if (!response.ok) {
        const error = await response.text();
        console.error('Telegram API error:', error);
        return false;
      }

      console.log('Message sent to Telegram successfully');
      return true;
    } catch (error) {
      console.error('Failed to send Telegram message:', error);
      return false;
    }
  }, []);

  const sendAlert = useCallback(async (signal: any): Promise<boolean> => {
    const message = formatSignalMessage(signal);
    return await sendToTelegram(message);
  }, [sendToTelegram]);

  const sendPerformanceReport = useCallback(async (performance: any): Promise<boolean> => {
    const message = formatPerformanceMessage(performance);
    return await sendToTelegram(message);
  }, [sendToTelegram]);

  const sendSystemAlert = useCallback(async (type: string, alertMessage: string): Promise<boolean> => {
    const message = formatSystemMessage(type, alertMessage);
    return await sendToTelegram(message);
  }, [sendToTelegram]);

  const sendEmergencyAlert = useCallback(async (alertMessage: string): Promise<boolean> => {
    const message = `
üö® *EMERGENCY ALERT* üö®

‚ö†Ô∏è *CRITICAL SYSTEM EVENT*
üìù *Message:* ${alertMessage}
‚è∞ *Time:* ${new Date().toLocaleString('id-ID')}

üîß *Immediate Action Required*
ü§ñ *MIORA AI System*
    `.trim();
    
    return await sendToTelegram(message);
  }, [sendToTelegram]);

  const testConnection = useCallback(async (config: TelegramConfig): Promise<boolean> => {
    const testMessage = `
üß™ *TELEGRAM CONNECTION TEST*

‚úÖ This is a test message from MIORA AI
‚è∞ Time: ${new Date().toLocaleString('id-ID')}

If you receive this message, your Telegram integration is working correctly!
ü§ñ MIORA AI System
    `.trim();
    
    return await sendToTelegram(testMessage, config);
  }, [sendToTelegram]);

  const validateConfig = (config: TelegramConfig): { valid: boolean; errors: string[] } => {
    const errors: string[] = [];
    
    if (!config.botToken) {
      errors.push('Bot token is required');
    } else if (!config.botToken.match(/^\d+:[A-Za-z0-9_-]{35}$/)) {
      errors.push('Invalid bot token format');
    }
    
    if (!config.chatId) {
      errors.push('Chat ID is required');
    } else if (!config.chatId.match(/^-?\d+$/)) {
      errors.push('Invalid chat ID format');
    }
    
    return {
      valid: errors.length === 0,
      errors
    };
  };

  const getInstructions = (): string => {
    return `
To set up Telegram alerts:

1. Create a Telegram bot:
   - Message @BotFather on Telegram
   - Send /newbot and follow instructions
   - Copy the bot token

2. Get your chat ID:
   - Add your bot to the desired chat/group
   - Send a message to the bot
   - Visit: https://api.telegram.org/bot[YOUR_BOT_TOKEN]/getUpdates
   - Find your chat ID in the response

3. Configure MIORA with your bot token and chat ID

4. Test the connection to ensure everything works
    `;
  };

  return {
    sendAlert,
    sendPerformanceReport,
    sendSystemAlert,
    sendEmergencyAlert,
    testConnection,
    validateConfig,
    getInstructions,
    formatSignalMessage,
    formatPerformanceMessage
  };
};

export { type TelegramConfig, type AlertMessage };
