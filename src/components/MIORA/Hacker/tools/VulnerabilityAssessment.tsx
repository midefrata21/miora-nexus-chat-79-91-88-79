import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { AlertTriangle, Shield, Bug, CheckCircle } from 'lucide-react';

interface Vulnerability {
  id: string;
  title: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  cvss: number;
  description: string;
  solution: string;
  cve?: string;
}

export const VulnerabilityAssessment: React.FC = () => {
  const [target, setTarget] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);

  const mockVulnerabilities: Vulnerability[] = [
    {
      id: 'MIORA-001',
      title: 'Outdated Software Components',
      severity: 'medium',
      cvss: 6.1,
      description: 'System contains outdated software components with known vulnerabilities',
      solution: 'Update all software components to latest versions',
      cve: 'CVE-2023-1234'
    },
    {
      id: 'MIORA-002', 
      title: 'Weak Authentication Configuration',
      severity: 'high',
      cvss: 7.5,
      description: 'Authentication mechanism allows weak password policies',
      solution: 'Implement strong password policies and multi-factor authentication'
    },
    {
      id: 'MIORA-003',
      title: 'Information Disclosure',
      severity: 'low',
      cvss: 3.1,
      description: 'Server headers reveal sensitive version information',
      solution: 'Configure server to hide version information in HTTP headers'
    },
    {
      id: 'MIORA-004',
      title: 'SQL Injection Potential',
      severity: 'critical',
      cvss: 9.8,
      description: 'Input validation weakness may allow SQL injection attacks',
      solution: 'Implement parameterized queries and input sanitization',
      cve: 'CVE-2023-5678'
    },
    {
      id: 'MIORA-005',
      title: 'Missing Security Headers',
      severity: 'medium',
      cvss: 5.3,
      description: 'Application missing critical security headers',
      solution: 'Implement Content Security Policy, HSTS, and other security headers'
    }
  ];

  const startAssessment = async () => {
    if (!target) return;
    
    setIsScanning(true);
    setProgress(0);
    setVulnerabilities([]);
    
    // Educational simulation
    const scanSteps = [
      'Port scanning and service detection...',
      'Checking for common vulnerabilities...',
      'Testing authentication mechanisms...',
      'Analyzing web application security...',
      'Checking for known CVEs...',
      'Generating vulnerability report...'
    ];

    for (let i = 0; i < scanSteps.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      setProgress(((i + 1) / scanSteps.length) * 100);
      
      console.log(`üîç ${scanSteps[i]}`);
      
      // Add random vulnerabilities during scan
      if (i > 1 && Math.random() > 0.6) {
        const randomVuln = mockVulnerabilities[Math.floor(Math.random() * mockVulnerabilities.length)];
        setVulnerabilities(prev => {
          const exists = prev.find(v => v.id === randomVuln.id);
          return exists ? prev : [...prev, randomVuln];
        });
      }
    }
    
    setIsScanning(false);
    console.log(`üîí Vulnerability assessment complete: ${vulnerabilities.length} issues found`);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600';
      case 'high': return 'bg-orange-600';
      case 'medium': return 'bg-yellow-600';
      case 'low': return 'bg-blue-600';
      default: return 'bg-gray-600';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <AlertTriangle className="h-4 w-4" />;
      case 'high': return <Bug className="h-4 w-4" />;
      case 'medium': return <Shield className="h-4 w-4" />;
      case 'low': return <CheckCircle className="h-4 w-4" />;
      default: return <Shield className="h-4 w-4" />;
    }
  };

  return (
    <div className="space-y-4">
      {/* Educational Warning */}
      <div className="p-3 bg-red-900/20 border border-red-500/30 rounded-lg">
        <div className="flex items-center text-red-400 mb-2">
          <AlertTriangle className="h-4 w-4 mr-2" />
          <span className="font-semibold">Authorized Testing Only</span>
        </div>
        <p className="text-xs text-red-300">
          This vulnerability scanner is for educational and authorized testing purposes only. 
          Only scan systems you own or have explicit written permission to test.
        </p>
      </div>

      {/* Scan Configuration */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="text-sm text-gray-400 mb-2 block">Target URL/IP</label>
          <Input
            placeholder="https://example.com or 192.168.1.100"
            value={target}
            onChange={(e) => setTarget(e.target.value)}
            className="bg-black/40 border-gray-600"
          />
        </div>
        
        <div className="flex items-end">
          <Button
            onClick={startAssessment}
            disabled={isScanning || !target}
            className="w-full bg-orange-600 hover:bg-orange-700"
          >
            {isScanning ? 'SCANNING...' : 'START ASSESSMENT'}
          </Button>
        </div>
      </div>

      {/* Progress */}
      {isScanning && (
        <div className="space-y-2">
          <div className="flex justify-between text-sm text-gray-400">
            <span>Vulnerability assessment in progress...</span>
            <span>{progress.toFixed(1)}%</span>
          </div>
          <Progress value={progress} className="h-2" />
        </div>
      )}

      {/* Results Summary */}
      {vulnerabilities.length > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {['critical', 'high', 'medium', 'low'].map(severity => {
            const count = vulnerabilities.filter(v => v.severity === severity).length;
            return (
              <div key={severity} className={`p-3 rounded-lg border ${getSeverityColor(severity)}/20 border-${severity === 'critical' ? 'red' : severity === 'high' ? 'orange' : severity === 'medium' ? 'yellow' : 'blue'}-500/30`}>
                <div className="flex items-center justify-between">
                  <span className="text-sm capitalize text-gray-300">{severity}</span>
                  {getSeverityIcon(severity)}
                </div>
                <div className="text-2xl font-bold text-white">{count}</div>
              </div>
            );
          })}
        </div>
      )}

      {/* Vulnerabilities List */}
      {vulnerabilities.length > 0 && (
        <div className="space-y-4">
          <h4 className="text-lg font-semibold text-red-400">
            üîç Discovered Vulnerabilities: {vulnerabilities.length}
          </h4>
          
          <div className="space-y-3 max-h-96 overflow-y-auto">
            {vulnerabilities.map((vuln) => (
              <div
                key={vuln.id}
                className="p-4 bg-gray-900/50 border border-gray-600/50 rounded-lg"
              >
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-2">
                    {getSeverityIcon(vuln.severity)}
                    <span className="font-semibold text-white">{vuln.title}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Badge className={getSeverityColor(vuln.severity)}>
                      {vuln.severity.toUpperCase()}
                    </Badge>
                    <Badge variant="outline" className="text-xs">
                      CVSS: {vuln.cvss}
                    </Badge>
                    {vuln.cve && (
                      <Badge variant="outline" className="text-xs">
                        {vuln.cve}
                      </Badge>
                    )}
                  </div>
                </div>
                
                <div className="space-y-2 text-sm">
                  <div>
                    <span className="text-gray-400">Description: </span>
                    <span className="text-gray-300">{vuln.description}</span>
                  </div>
                  
                  <div>
                    <span className="text-gray-400">Solution: </span>
                    <span className="text-green-300">{vuln.solution}</span>
                  </div>
                  
                  <div className="flex items-center justify-between pt-2 border-t border-gray-700">
                    <span className="text-xs text-gray-500">ID: {vuln.id}</span>
                    <Button size="sm" variant="outline" className="text-xs">
                      View Details
                    </Button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Educational Notes */}
      <div className="p-3 bg-blue-900/20 border border-blue-500/30 rounded-lg">
        <h5 className="text-blue-400 font-semibold mb-2">üìö Educational Notes</h5>
        <ul className="text-xs text-blue-300 space-y-1">
          <li>‚Ä¢ This is a simulated vulnerability scanner for learning purposes</li>
          <li>‚Ä¢ Real vulnerability scanners include tools like Nessus, OpenVAS, and Nmap</li>
          <li>‚Ä¢ Always get proper authorization before scanning any systems</li>
          <li>‚Ä¢ Vulnerability assessments should be part of a comprehensive security program</li>
        </ul>
      </div>
    </div>
  );
};