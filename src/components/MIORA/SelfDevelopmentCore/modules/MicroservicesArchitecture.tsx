import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Network, Zap, Package, Activity, CheckCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Microservice {
  name: string;
  status: 'pending' | 'splitting' | 'deployed' | 'failed';
  progress: number;
  instances: number;
}

interface DevelopmentModule {
  id: string;
  name: string;
  status: 'active' | 'developing' | 'standby' | 'error';
  progress: number;
  autoGenerated: boolean;
  capabilities: string[];
  lastActivity: number;
}

interface MicroservicesArchitectureProps {
  module: DevelopmentModule;
}

export const MicroservicesArchitecture: React.FC<MicroservicesArchitectureProps> = ({ module }) => {
  const { toast } = useToast();
  const [isSplitting, setIsSplitting] = useState(false);
  const [totalServices, setTotalServices] = useState(0);
  const [microservices, setMicroservices] = useState<Microservice[]>([
    { name: 'Auth Service', status: 'pending', progress: 0, instances: 0 },
    { name: 'User Service', status: 'pending', progress: 0, instances: 0 },
    { name: 'Data Service', status: 'pending', progress: 0, instances: 0 },
    { name: 'File Service', status: 'pending', progress: 0, instances: 0 },
    { name: 'Notification Service', status: 'pending', progress: 0, instances: 0 },
    { name: 'Analytics Service', status: 'pending', progress: 0, instances: 0 }
  ]);

  useEffect(() => {
    if (isSplitting) {
      const interval = setInterval(() => {
        setMicroservices(prev => prev.map(service => {
          if (service.status === 'splitting') {
            const newProgress = Math.min(100, service.progress + Math.random() * 20);
            const newInstances = newProgress > 80 ? Math.floor(Math.random() * 3) + 2 : service.instances;
            return {
              ...service,
              progress: newProgress,
              instances: newInstances,
              status: newProgress >= 95 ? 'deployed' : 'splitting'
            };
          }
          return service;
        }));

        setMicroservices(prev => {
          const pendingIndex = prev.findIndex(service => service.status === 'pending');
          if (pendingIndex !== -1 && prev.filter(service => service.status === 'splitting').length === 0) {
            const newServices = [...prev];
            newServices[pendingIndex] = { ...newServices[pendingIndex], status: 'splitting', progress: 15 };
            return newServices;
          }
          return prev;
        });

        if (Math.random() > 0.7) {
          setTotalServices(prev => prev + 1);
        }
      }, 2500);

      return () => clearInterval(interval);
    }
  }, [isSplitting]);

  const handleAutoSplit = () => {
    setIsSplitting(true);
    setTotalServices(0);
    setMicroservices(prev => prev.map(service => ({ 
      ...service, 
      status: 'pending', 
      progress: 0, 
      instances: 0 
    })));
    
    toast({
      title: "ðŸ”„ Auto-Splitting to Microservices",
      description: "Breaking down monolith into microservices...",
    });

    setTimeout(() => {
      setIsSplitting(false);
      toast({
        title: "âœ… Microservices Architecture Complete",
        description: "Successfully split into distributed services!",
      });
    }, 25000);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'deployed': return 'bg-green-500';
      case 'splitting': return 'bg-blue-500';
      case 'failed': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <Card className="bg-gradient-to-br from-rose-600/20 to-pink-600/20 border-rose-500/30">
      <CardHeader>
        <CardTitle className="flex items-center justify-between text-rose-300">
          <div className="flex items-center">
            <Network className="h-5 w-5 mr-2" />
            {module.name}
          </div>
          <div className="flex items-center space-x-2">
            <div className={`w-2 h-2 rounded-full ${getStatusColor(module.status)}`}></div>
            <Badge variant="outline" className="text-rose-400 border-rose-400">
              {isSplitting ? "SPLITTING" : "READY"}
            </Badge>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Progress value={module.progress} className="h-2" />
        <p className="text-sm text-gray-300">Architecture Progress: {module.progress.toFixed(1)}%</p>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="text-center p-4 bg-black/30 rounded-lg">
            <Package className="h-6 w-6 mx-auto mb-2 text-rose-400" />
            <div className="text-2xl font-bold text-white">{totalServices}</div>
            <div className="text-sm text-gray-400">Services Created</div>
          </div>
          <div className="text-center p-4 bg-black/30 rounded-lg">
            <Activity className="h-6 w-6 mx-auto mb-2 text-pink-400" />
            <div className="text-2xl font-bold text-white">
              {microservices.reduce((sum, service) => sum + service.instances, 0)}
            </div>
            <div className="text-sm text-gray-400">Active Instances</div>
          </div>
          <div className="text-center p-4 bg-black/30 rounded-lg">
            <Network className="h-6 w-6 mx-auto mb-2 text-purple-400" />
            <div className="text-2xl font-bold text-white">Auto</div>
            <div className="text-sm text-gray-400">Load Balancing</div>
          </div>
        </div>

        <div className="space-y-2">
          <h4 className="text-white font-medium flex items-center">
            <Package className="h-4 w-4 mr-2" />
            Microservices Breakdown
          </h4>
          <div className="space-y-2">
            {microservices.map((service, index) => (
              <div key={index} className="p-3 bg-black/20 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <span className="text-white font-medium">{service.name}</span>
                    {service.instances > 0 && (
                      <Badge variant="outline" className="text-xs">
                        {service.instances} instances
                      </Badge>
                    )}
                  </div>
                  <Badge className={getStatusColor(service.status)}>
                    {service.status === 'deployed' && <CheckCircle className="h-3 w-3 mr-1" />}
                    {service.status.toUpperCase()}
                  </Badge>
                </div>
                {service.status === 'splitting' && (
                  <Progress value={service.progress} className="h-1" />
                )}
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-2">
          <h4 className="text-white font-medium">Architecture Features</h4>
          <div className="space-y-1 text-xs text-gray-300">
            <p>â€¢ Intelligent service boundary detection</p>
            <p>â€¢ Auto API gateway configuration</p>
            <p>â€¢ Service mesh & inter-service communication</p>
            <p>â€¢ Circuit breaker & fault tolerance</p>
            <p>â€¢ Distributed tracing & monitoring</p>
            <p>â€¢ Auto-scaling per service</p>
          </div>
        </div>

        <Button 
          onClick={handleAutoSplit}
          disabled={isSplitting}
          className="w-full bg-rose-600 hover:bg-rose-700"
        >
          <Network className="h-4 w-4 mr-2" />
          {isSplitting ? "Splitting..." : "Auto-Split to Microservices"}
        </Button>

        <div className="mt-4 p-3 bg-black/30 rounded">
          <div className="flex items-center text-rose-400 text-sm">
            <Zap className="h-4 w-4 mr-2" />
            Building distributed architecture...
          </div>
          <p className="text-xs text-gray-400 mt-1">
            Auto-splitting monolith into scalable microservices
          </p>
        </div>
      </CardContent>
    </Card>
  );
};