import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Cloud, Rocket, Server, Globe, CheckCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface DeploymentPlatform {
  name: string;
  status: 'ready' | 'deploying' | 'deployed' | 'failed';
  progress: number;
  icon: string;
}

interface DevelopmentModule {
  id: string;
  name: string;
  status: 'active' | 'developing' | 'standby' | 'error';
  progress: number;
  autoGenerated: boolean;
  capabilities: string[];
  lastActivity: number;
}

interface CloudDeploymentProps {
  module: DevelopmentModule;
}

export const CloudDeployment: React.FC<CloudDeploymentProps> = ({ module }) => {
  const { toast } = useToast();
  const [isDeploying, setIsDeploying] = useState(false);
  const [platforms, setPlatforms] = useState<DeploymentPlatform[]>([
    { name: 'Vercel', status: 'ready', progress: 0, icon: '▲' },
    { name: 'Netlify', status: 'ready', progress: 0, icon: '🌐' },
    { name: 'AWS', status: 'ready', progress: 0, icon: '☁️' },
    { name: 'Azure', status: 'ready', progress: 0, icon: '🔷' },
    { name: 'GCP', status: 'ready', progress: 0, icon: '🎯' }
  ]);

  useEffect(() => {
    if (isDeploying) {
      const interval = setInterval(() => {
        setPlatforms(prev => prev.map(platform => ({
          ...platform,
          progress: platform.status === 'deploying' ? Math.min(100, platform.progress + Math.random() * 15) : platform.progress,
          status: platform.progress >= 95 && platform.status === 'deploying' ? 'deployed' : platform.status
        })));
      }, 1000);

      return () => clearInterval(interval);
    }
  }, [isDeploying]);

  const handleOneClickDeploy = () => {
    setIsDeploying(true);
    setPlatforms(prev => prev.map(platform => ({
      ...platform,
      status: 'deploying',
      progress: 5
    })));

    toast({
      title: "🚀 One-Click Deployment Started",
      description: "Deploying to all platforms simultaneously...",
    });

    setTimeout(() => {
      setIsDeploying(false);
      toast({
        title: "✅ Deployment Complete",
        description: "Successfully deployed to all platforms!",
      });
    }, 12000);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'deployed': return 'bg-green-500';
      case 'deploying': return 'bg-blue-500';
      case 'failed': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <Card className="bg-gradient-to-br from-emerald-600/20 to-teal-600/20 border-emerald-500/30">
      <CardHeader>
        <CardTitle className="flex items-center justify-between text-emerald-300">
          <div className="flex items-center">
            <Rocket className="h-5 w-5 mr-2" />
            {module.name}
          </div>
          <div className="flex items-center space-x-2">
            <div className={`w-2 h-2 rounded-full ${getStatusColor(module.status)}`}></div>
            <Badge variant="outline" className="text-emerald-400 border-emerald-400">
              {isDeploying ? "DEPLOYING" : "READY"}
            </Badge>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Progress value={module.progress} className="h-2" />
        <p className="text-sm text-gray-300">System Progress: {module.progress.toFixed(1)}%</p>
        
        <div className="space-y-2">
          <h4 className="text-white font-medium flex items-center">
            <Cloud className="h-4 w-4 mr-2" />
            Multi-Platform Deployment
          </h4>
          <div className="space-y-2">
            {platforms.map((platform, index) => (
              <div key={index} className="p-3 bg-black/20 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center">
                    <span className="text-lg mr-2">{platform.icon}</span>
                    <span className="text-white font-medium">{platform.name}</span>
                  </div>
                  <Badge className={getStatusColor(platform.status)}>
                    {platform.status === 'deployed' && <CheckCircle className="h-3 w-3 mr-1" />}
                    {platform.status.toUpperCase()}
                  </Badge>
                </div>
                {platform.status === 'deploying' && (
                  <Progress value={platform.progress} className="h-1" />
                )}
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-2">
          <h4 className="text-white font-medium flex items-center">
            <Server className="h-4 w-4 mr-2" />
            Deployment Features
          </h4>
          <div className="space-y-1 text-xs text-gray-300">
            <p>• Zero-downtime blue-green deployment</p>
            <p>• Auto SSL certificate provisioning</p>
            <p>• CDN optimization & edge caching</p>
            <p>• Environment variable injection</p>
            <p>• Rollback capability & health checks</p>
          </div>
        </div>

        <Button 
          onClick={handleOneClickDeploy}
          disabled={isDeploying}
          className="w-full bg-emerald-600 hover:bg-emerald-700"
        >
          <Globe className="h-4 w-4 mr-2" />
          {isDeploying ? "Deploying..." : "One-Click Deploy All"}
        </Button>

        <div className="mt-4 p-3 bg-black/30 rounded">
          <div className="flex items-center text-emerald-400 text-sm">
            <Rocket className="h-4 w-4 mr-2" />
            Auto-deploying to multiple platforms...
          </div>
          <p className="text-xs text-gray-400 mt-1">
            Intelligent deployment orchestration across clouds
          </p>
        </div>
      </CardContent>
    </Card>
  );
};