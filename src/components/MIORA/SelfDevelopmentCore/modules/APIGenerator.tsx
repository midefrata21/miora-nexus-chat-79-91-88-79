import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Code, Zap, Globe, Server, CheckCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface APIEndpoint {
  name: string;
  type: 'REST' | 'GraphQL' | 'WebSocket';
  status: 'pending' | 'generating' | 'completed' | 'failed';
  progress: number;
}

interface DevelopmentModule {
  id: string;
  name: string;
  status: 'active' | 'developing' | 'standby' | 'error';
  progress: number;
  autoGenerated: boolean;
  capabilities: string[];
  lastActivity: number;
}

interface APIGeneratorProps {
  module: DevelopmentModule;
}

export const APIGenerator: React.FC<APIGeneratorProps> = ({ module }) => {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedAPIs, setGeneratedAPIs] = useState(0);
  const [endpoints, setEndpoints] = useState<APIEndpoint[]>([
    { name: 'User Management', type: 'REST', status: 'pending', progress: 0 },
    { name: 'Data Query Layer', type: 'GraphQL', status: 'pending', progress: 0 },
    { name: 'Real-time Updates', type: 'WebSocket', status: 'pending', progress: 0 },
    { name: 'File Upload', type: 'REST', status: 'pending', progress: 0 },
    { name: 'Analytics API', type: 'REST', status: 'pending', progress: 0 }
  ]);

  useEffect(() => {
    if (isGenerating) {
      const interval = setInterval(() => {
        setEndpoints(prev => prev.map(endpoint => {
          if (endpoint.status === 'generating') {
            const newProgress = Math.min(100, endpoint.progress + Math.random() * 25);
            return {
              ...endpoint,
              progress: newProgress,
              status: newProgress >= 95 ? 'completed' : 'generating'
            };
          }
          return endpoint;
        }));

        setEndpoints(prev => {
          const pendingIndex = prev.findIndex(ep => ep.status === 'pending');
          if (pendingIndex !== -1 && prev.filter(ep => ep.status === 'generating').length === 0) {
            const newEndpoints = [...prev];
            newEndpoints[pendingIndex] = { ...newEndpoints[pendingIndex], status: 'generating', progress: 10 };
            return newEndpoints;
          }
          return prev;
        });

        if (Math.random() > 0.6) {
          setGeneratedAPIs(prev => prev + 1);
        }
      }, 2000);

      return () => clearInterval(interval);
    }
  }, [isGenerating]);

  const handleGenerateAPIs = () => {
    setIsGenerating(true);
    setGeneratedAPIs(0);
    setEndpoints(prev => prev.map(ep => ({ ...ep, status: 'pending', progress: 0 })));
    
    toast({
      title: "⚡ API Generation Started",
      description: "Generating REST & GraphQL APIs automatically...",
    });

    setTimeout(() => {
      setIsGenerating(false);
      toast({
        title: "✅ API Generation Complete",
        description: "All APIs generated with full documentation!",
      });
    }, 20000);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-500';
      case 'generating': return 'bg-blue-500';
      case 'failed': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'REST': return 'bg-blue-600';
      case 'GraphQL': return 'bg-pink-600';
      case 'WebSocket': return 'bg-green-600';
      default: return 'bg-gray-600';
    }
  };

  return (
    <Card className="bg-gradient-to-br from-amber-600/20 to-orange-600/20 border-amber-500/30">
      <CardHeader>
        <CardTitle className="flex items-center justify-between text-amber-300">
          <div className="flex items-center">
            <Code className="h-5 w-5 mr-2" />
            {module.name}
          </div>
          <div className="flex items-center space-x-2">
            <div className={`w-2 h-2 rounded-full ${getStatusColor(module.status)}`}></div>
            <Badge variant="outline" className="text-amber-400 border-amber-400">
              {isGenerating ? "GENERATING" : "READY"}
            </Badge>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Progress value={module.progress} className="h-2" />
        <p className="text-sm text-gray-300">Generator Progress: {module.progress.toFixed(1)}%</p>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="text-center p-4 bg-black/30 rounded-lg">
            <Server className="h-6 w-6 mx-auto mb-2 text-amber-400" />
            <div className="text-2xl font-bold text-white">{generatedAPIs}</div>
            <div className="text-sm text-gray-400">APIs Generated</div>
          </div>
          <div className="text-center p-4 bg-black/30 rounded-lg">
            <Globe className="h-6 w-6 mx-auto mb-2 text-orange-400" />
            <div className="text-2xl font-bold text-white">100%</div>
            <div className="text-sm text-gray-400">Documentation</div>
          </div>
          <div className="text-center p-4 bg-black/30 rounded-lg">
            <Code className="h-6 w-6 mx-auto mb-2 text-yellow-400" />
            <div className="text-2xl font-bold text-white">Auto</div>
            <div className="text-sm text-gray-400">Testing</div>
          </div>
        </div>

        <div className="space-y-2">
          <h4 className="text-white font-medium flex items-center">
            <Server className="h-4 w-4 mr-2" />
            API Endpoints Generation
          </h4>
          <div className="space-y-2">
            {endpoints.map((endpoint, index) => (
              <div key={index} className="p-3 bg-black/20 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <span className="text-white font-medium">{endpoint.name}</span>
                    <Badge className={getTypeColor(endpoint.type)}>
                      {endpoint.type}
                    </Badge>
                  </div>
                  <Badge className={getStatusColor(endpoint.status)}>
                    {endpoint.status === 'completed' && <CheckCircle className="h-3 w-3 mr-1" />}
                    {endpoint.status.toUpperCase()}
                  </Badge>
                </div>
                {endpoint.status === 'generating' && (
                  <Progress value={endpoint.progress} className="h-1" />
                )}
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-2">
          <h4 className="text-white font-medium">Generation Features</h4>
          <div className="space-y-1 text-xs text-gray-300">
            <p>• Auto REST API from database schema</p>
            <p>• GraphQL resolver generation</p>
            <p>• OpenAPI/Swagger documentation</p>
            <p>• Authentication & authorization</p>
            <p>• Rate limiting & validation</p>
            <p>• Automated testing suites</p>
          </div>
        </div>

        <Button 
          onClick={handleGenerateAPIs}
          disabled={isGenerating}
          className="w-full bg-amber-600 hover:bg-amber-700"
        >
          <Code className="h-4 w-4 mr-2" />
          {isGenerating ? "Generating..." : "Auto-Generate APIs"}
        </Button>

        <div className="mt-4 p-3 bg-black/30 rounded">
          <div className="flex items-center text-amber-400 text-sm">
            <Zap className="h-4 w-4 mr-2" />
            Generating intelligent API layers...
          </div>
          <p className="text-xs text-gray-400 mt-1">
            Auto-creating REST, GraphQL & WebSocket endpoints
          </p>
        </div>
      </CardContent>
    </Card>
  );
};