import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Database, Zap, Settings, RefreshCw, CheckCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface DatabaseOperation {
  name: string;
  status: 'pending' | 'running' | 'completed' | 'failed';
  progress: number;
}

interface DevelopmentModule {
  id: string;
  name: string;
  status: 'active' | 'developing' | 'standby' | 'error';
  progress: number;
  autoGenerated: boolean;
  capabilities: string[];
  lastActivity: number;
}

interface DatabaseIntegrationProps {
  module: DevelopmentModule;
}

export const DatabaseIntegration: React.FC<DatabaseIntegrationProps> = ({ module }) => {
  const { toast } = useToast();
  const [isRunning, setIsRunning] = useState(false);
  const [databases] = useState(['PostgreSQL', 'MongoDB', 'Redis', 'Supabase']);
  const [operations, setOperations] = useState<DatabaseOperation[]>([
    { name: 'Schema Generation', status: 'pending', progress: 0 },
    { name: 'Migration Scripts', status: 'pending', progress: 0 },
    { name: 'Seed Data Setup', status: 'pending', progress: 0 },
    { name: 'Index Optimization', status: 'pending', progress: 0 },
    { name: 'Backup Configuration', status: 'pending', progress: 0 }
  ]);

  useEffect(() => {
    if (isRunning) {
      const interval = setInterval(() => {
        setOperations(prev => prev.map(op => {
          if (op.status === 'running') {
            const newProgress = Math.min(100, op.progress + Math.random() * 20);
            return {
              ...op,
              progress: newProgress,
              status: newProgress >= 95 ? 'completed' : 'running'
            };
          }
          return op;
        }));

        setOperations(prev => {
          const pendingIndex = prev.findIndex(op => op.status === 'pending');
          if (pendingIndex !== -1 && prev.filter(op => op.status === 'running').length === 0) {
            const newOps = [...prev];
            newOps[pendingIndex] = { ...newOps[pendingIndex], status: 'running', progress: 5 };
            return newOps;
          }
          return prev;
        });
      }, 1500);

      return () => clearInterval(interval);
    }
  }, [isRunning]);

  const handleAutoSetup = () => {
    setIsRunning(true);
    setOperations(prev => prev.map(op => ({ ...op, status: 'pending', progress: 0 })));
    
    toast({
      title: "🗄️ Database Auto-Setup Started",
      description: "Setting up database schema and migrations...",
    });

    setTimeout(() => {
      setIsRunning(false);
      toast({
        title: "✅ Database Setup Complete",
        description: "All database operations completed successfully!",
      });
    }, 15000);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-500';
      case 'running': return 'bg-blue-500';
      case 'failed': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <Card className="bg-gradient-to-br from-violet-600/20 to-purple-600/20 border-violet-500/30">
      <CardHeader>
        <CardTitle className="flex items-center justify-between text-violet-300">
          <div className="flex items-center">
            <Database className="h-5 w-5 mr-2" />
            {module.name}
          </div>
          <div className="flex items-center space-x-2">
            <div className={`w-2 h-2 rounded-full ${getStatusColor(module.status)}`}></div>
            <Badge variant="outline" className="text-violet-400 border-violet-400">
              {isRunning ? "SETTING UP" : "READY"}
            </Badge>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Progress value={module.progress} className="h-2" />
        <p className="text-sm text-gray-300">Integration Progress: {module.progress.toFixed(1)}%</p>
        
        <div className="space-y-2">
          <h4 className="text-white font-medium flex items-center">
            <Settings className="h-4 w-4 mr-2" />
            Supported Databases
          </h4>
          <div className="grid grid-cols-2 gap-2">
            {databases.map((db, index) => (
              <div key={index} className="p-2 bg-black/20 rounded text-center">
                <span className="text-sm text-gray-300">{db}</span>
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-2">
          <h4 className="text-white font-medium flex items-center">
            <RefreshCw className="h-4 w-4 mr-2" />
            Auto-Setup Operations
          </h4>
          <div className="space-y-2">
            {operations.map((operation, index) => (
              <div key={index} className="p-3 bg-black/20 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-white font-medium">{operation.name}</span>
                  <Badge className={getStatusColor(operation.status)}>
                    {operation.status === 'completed' && <CheckCircle className="h-3 w-3 mr-1" />}
                    {operation.status.toUpperCase()}
                  </Badge>
                </div>
                {operation.status === 'running' && (
                  <Progress value={operation.progress} className="h-1" />
                )}
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-2">
          <h4 className="text-white font-medium">Migration Features</h4>
          <div className="space-y-1 text-xs text-gray-300">
            <p>• Auto schema generation from models</p>
            <p>• Zero-downtime migration strategies</p>
            <p>• Data backup before migrations</p>
            <p>• Rollback capability for safety</p>
            <p>• Index optimization suggestions</p>
          </div>
        </div>

        <Button 
          onClick={handleAutoSetup}
          disabled={isRunning}
          className="w-full bg-violet-600 hover:bg-violet-700"
        >
          <Database className="h-4 w-4 mr-2" />
          {isRunning ? "Setting Up..." : "Auto-Setup Database"}
        </Button>

        <div className="mt-4 p-3 bg-black/30 rounded">
          <div className="flex items-center text-violet-400 text-sm">
            <Zap className="h-4 w-4 mr-2" />
            Building database infrastructure...
          </div>
          <p className="text-xs text-gray-400 mt-1">
            Auto-generating schemas and migration scripts
          </p>
        </div>
      </CardContent>
    </Card>
  );
};