
import { useState, useCallback, useRef, useEffect } from 'react';

export const useCodeGeneration = (isActive: boolean, onCodeGenerated: () => void) => {
  const getInitialCodeFiles = () => {
    const savedFiles = localStorage.getItem('miora-generated-code-files');
    if (savedFiles) {
      try {
        return JSON.parse(savedFiles);
      } catch (error) {
        console.error('Failed to parse saved code files:', error);
      }
    }
    return [];
  };

  const [generatedCodeFiles, setGeneratedCodeFiles] = useState<string[]>(getInitialCodeFiles);
  const codeGenerationIntervalRef = useRef<NodeJS.Timeout | null>(null);

  const generateSampleCode = useCallback((type: string): string => {
    const codeTemplates = {
      'React Component': `import React from 'react';\n\nconst AutoComponent = () => {\n  return <div>Auto-generated component</div>;\n};\n\nexport default AutoComponent;`,
      'TypeScript Interface': `interface AutoInterface {\n  id: string;\n  name: string;\n  autoGenerated: boolean;\n}`,
      'API Route': `export async function GET() {\n  return Response.json({ message: 'Auto-generated API' });\n}`,
      'Database Schema': `CREATE TABLE auto_table (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255),\n  created_at TIMESTAMP DEFAULT NOW()\n);`
    };
    return codeTemplates[type as keyof typeof codeTemplates] || '// Auto-generated code';
  }, []);

  const autonomouslyGenerateCode = useCallback(() => {
    const codeTypes = [
      'React Component',
      'TypeScript Interface', 
      'API Route',
      'Database Schema',
      'Utility Function',
      'Custom Hook',
      'Service Class',
      'Configuration File'
    ];

    const randomType = codeTypes[Math.floor(Math.random() * codeTypes.length)];
    const fileName = `Auto${randomType.replace(' ', '')}${Date.now()}.tsx`;
    
    const newFiles = [...generatedCodeFiles, fileName];
    setGeneratedCodeFiles(newFiles);
    localStorage.setItem('miora-generated-code-files', JSON.stringify(newFiles));
    onCodeGenerated();

    const generatedCode = {
      fileName,
      type: randomType,
      code: generateSampleCode(randomType),
      timestamp: Date.now(),
      autoGenerated: true
    };

    localStorage.setItem(`miora_auto_generated_${Date.now()}`, JSON.stringify(generatedCode));
    
    console.log(`ðŸ’» AUTO-CODED: ${fileName} (${randomType})`);
  }, [generateSampleCode, onCodeGenerated]);

  const startSelfCoding = useCallback(() => {
    if (isActive) {
      codeGenerationIntervalRef.current = setInterval(() => {
        autonomouslyGenerateCode();
      }, 25000);
    }
  }, [isActive, autonomouslyGenerateCode]);

  const stopSelfCoding = useCallback(() => {
    if (codeGenerationIntervalRef.current) {
      clearInterval(codeGenerationIntervalRef.current);
    }
  }, []);

  useEffect(() => {
    if (isActive) {
      startSelfCoding();
    } else {
      stopSelfCoding();
    }

    return () => stopSelfCoding();
  }, [isActive, startSelfCoding, stopSelfCoding]);

  return {
    generatedCodeFiles,
    autonomouslyGenerateCode
  };
};
